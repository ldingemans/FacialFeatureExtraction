import pandas as pd
from tqdm import tqdm
import scipy
import numpy as np
from sklearn.metrics import roc_auc_score, brier_score_loss
import random
import os
import sys
from deepface import DeepFace

def angle_to(p1, p2, rotation=0, clockwise=False):
    """
    Calculate the angle between two points
    
    Parameters
    ----------
    p1 : numpy array
        Coordinates of first landmark
    p2 : numpy array
        Coordinates of second landmark
    rotation: int
        Rotation in degrees
    clockwise: boolean
        Whether to calculate the clockwise angle
        
    Returns
    -------
    angle: angle of rotation
    """
    from math import degrees, atan2
    angle = degrees(atan2(p2[1] - p1[1], p2[0] - p1[0])) - rotation
    if not clockwise:
        angle = -angle
    return angle % 360
    
def get_crop_image(filename):
    """
    Detect face in image and align it
    
    Parameters
    ----------
    filename: str
        Path to image
        
    Returns
    -------
    raw_landmarks: pandas dataframe
        The facial landmarks in x,y,z coordinates, unnormalized
    landmarks:
        The facial landmarks in x,y,z coordinates, normalized to image size
    crop_img: numpy array
        The cropped image
    """
    import cv2
    import mediapipe
    import matplotlib.pyplot as plt 
    import imutils
    import scipy
    
    drawingModule = mediapipe.solutions.drawing_utils
    faceModule = mediapipe.solutions.face_mesh
     
    with faceModule.FaceMesh(static_image_mode=True) as face:
        image = cv2.imread(filename)
        if image is None:
           image = cv2.imread(filename.replace('\\\\', '\\'))
        results = face.process(cv2.cvtColor(image, cv2.COLOR_BGR2RGB))
    landmarks = []
    raw_landmarks = []
    for f in results.multi_face_landmarks[0].landmark:
        landmarks.append([f.x, f.y, f.z])
        raw_landmarks.append([f.x * image.shape[1], f.y * image.shape[0], f.z])
    landmarks, raw_landmarks = pd.DataFrame(landmarks),pd.DataFrame(raw_landmarks) 
            
    x_min, x_max, y_min, y_max = int(raw_landmarks.iloc[:,0].min()),int(raw_landmarks.iloc[:,0].max()),int(raw_landmarks.iloc[:,1].min()),int(raw_landmarks.iloc[:,1].max())
    
    if x_min < 0:
        x_min = 0
    if y_min < 0:
        y_min = 0
    
    crop_img = image[y_min:y_max,x_min:x_max]
    crop_img = imutils.resize(crop_img, width=500)
    
    from scipy import ndimage
    angle_total = []
    for points in [(245, 465), (33, 263), (61 ,291)]:
        angle_total.append(angle_to(raw_landmarks.iloc[points[0],:].to_numpy(), raw_landmarks.iloc[points[1],:].to_numpy(), clockwise=True))
    #rotation angle in degree
    crop_img = ndimage.rotate(crop_img, np.median(angle_total))
    
    with faceModule.FaceMesh(static_image_mode=True) as face:
        results = face.process(cv2.cvtColor(crop_img, cv2.COLOR_BGR2RGB))
    landmarks = []
    raw_landmarks = []
    for f in results.multi_face_landmarks[0].landmark:
        landmarks.append([f.x, f.y, f.z])
        raw_landmarks.append([f.x * crop_img.shape[1], f.y * crop_img.shape[0], f.z])
        
    landmarks, raw_landmarks = pd.DataFrame(landmarks),pd.DataFrame(raw_landmarks) 
    
    landmarks = landmarks - landmarks.iloc[4,:]

    return raw_landmarks, landmarks, crop_img

def calc_selected_distances(landmarks, distance_metric='euclidean'):
    """
    Calculate distances between facial landmarks
    
    Parameters
    ----------
    landmarks: pandas dataframe or numpy array
        Coordinates of facial landmarks
    distance_metric: str
        Distance metric, default is euclidean, other option is cosine
        
    Returns
    -------
    distances: numpy array
        Calculated distances
    """
    import matplotlib.pyplot as plt
    from scipy.spatial import distance
    import networkx as nx
    
    EDGES = [(173, 155), (155, 133), (133, 173), (246, 33), (33, 7), (7, 246), (382, 398), (398, 362), (362, 382), (263, 466), (466, 249), (249, 263), (308, 415), (415, 324), (324, 308), (78, 95), (95, 191), (191, 78), (356, 389), (389, 264), (264, 356), (127, 34), (34, 162), (162, 127), (368, 264), (389, 368), (139, 162), (34, 139), (267, 0), (0, 302), (302, 267), (37, 72), (72, 0), (0, 37), (11, 302), (0, 11), (72, 11), (349, 451), (451, 350), (350, 349), (120, 121), (121, 231), (231, 120), (452, 350), (451, 452), (232, 231), (121, 232), (302, 269), (269, 267), (37, 39), (39, 72), (303, 269), (302, 303), (73, 72), (39, 73), (357, 343), (343, 350), (350, 357), (128, 121), (121, 114), (114, 128), (277, 350), (343, 277), (47, 114), (121, 47), (452, 357), (128, 232), (453, 357), (452, 453), (233, 232), (128, 233), (299, 333), (333, 297), (297, 299), (69, 67), (67, 104), (104, 69), (332, 297), (333, 332), (103, 104), (67, 103), (175, 152), (152, 396), (396, 175), (175, 171), (171, 152), (377, 396), (152, 377), (148, 152), (171, 148), (381, 384), (384, 382), (382, 381), (154, 155), (155, 157), (157, 154), (384, 398), (173, 157), (280, 347), (347, 330), (330, 280), (50, 101), (101, 118), (118, 50), (348, 330), (347, 348), (119, 118), (101, 119), (303, 270), (270, 269), (39, 40), (40, 73), (304, 270), (303, 304), (74, 73), (40, 74), (9, 336), (336, 151), (151, 9), (151, 107), (107, 9), (337, 151), (336, 337), (108, 107), (151, 108), (344, 278), (278, 360), (360, 344), (115, 131), (131, 48), (48, 115), (279, 360), (278, 279), (49, 48), (131, 49), (262, 431), (431, 418), (418, 262), (32, 194), (194, 211), (211, 32), (424, 418), (431, 424), (204, 211), (194, 204), (304, 408), (408, 270), (40, 184), (184, 74), (409, 270), (408, 409), (185, 184), (40, 185), (272, 310), (310, 407), (407, 272), (42, 183), (183, 80), (80, 42), (415, 407), (310, 415), (191, 80), (183, 191), (322, 270), (270, 410), (410, 322), (92, 186), (186, 40), (40, 92), (409, 410), (186, 185), (347, 449), (449, 348), (119, 229), (229, 118), (450, 348), (449, 450), (230, 229), (119, 230), (434, 432), (432, 430), (430, 434), (214, 210), (210, 212), (212, 214), (422, 430), (432, 422), (202, 212), (210, 202), (313, 314), (314, 18), (18, 313), (83, 18), (18, 84), (84, 83), (17, 18), (314, 17), (17, 84), (307, 375), (375, 306), (306, 307), (77, 76), (76, 146), (146, 77), (291, 306), (375, 291), (61, 146), (76, 61), (259, 387), (387, 260), (260, 259), (29, 30), (30, 160), (160, 29), (388, 260), (387, 388), (161, 160), (30, 161), (286, 414), (414, 384), (384, 286), (56, 157), (157, 190), (190, 56), (414, 398), (173, 190), (424, 406), (406, 418), (194, 182), (182, 204), (335, 406), (424, 335), (106, 204), (182, 106), (367, 416), (416, 364), (364, 367), (138, 135), (135, 192), (192, 138), (434, 364), (416, 434), (214, 192), (135, 214), (391, 423), (423, 327), (327, 391), (165, 98), (98, 203), (203, 165), (358, 327), (423, 358), (129, 203), (98, 129), (298, 301), (301, 284), (284, 298), (68, 54), (54, 71), (71, 68), (251, 284), (301, 251), (21, 71), (54, 21), (4, 275), (275, 5), (5, 4), (5, 45), (45, 4), (281, 5), (275, 281), (51, 45), (5, 51), (254, 373), (373, 253), (253, 254), (24, 23), (23, 144), (144, 24), (374, 253), (373, 374), (145, 144), (23, 145), (320, 321), (321, 307), (307, 320), (90, 77), (77, 91), (91, 90), (321, 375), (146, 91), (280, 425), (425, 411), (411, 280), (50, 187), (187, 205), (205, 50), (427, 411), (425, 427), (207, 205), (187, 207), (421, 313), (313, 200), (200, 421), (201, 200), (200, 83), (83, 201), (18, 200), (335, 321), (321, 406), (182, 91), (91, 106), (405, 406), (321, 405), (181, 91), (182, 181), (321, 404), (404, 405), (181, 180), (180, 91), (320, 404), (180, 90), (314, 16), (16, 17), (16, 84), (315, 16), (314, 315), (85, 84), (16, 85), (425, 266), (266, 426), (426, 425), (205, 206), (206, 36), (36, 205), (423, 426), (266, 423), (203, 36), (206, 203), (369, 396), (396, 400), (400, 369), (140, 176), (176, 171), (171, 140), (377, 400), (176, 148), (391, 269), (269, 322), (322, 391), (165, 92), (92, 39), (39, 165), (417, 465), (465, 413), (413, 417), (193, 189), (189, 245), (245, 193), (464, 413), (465, 464), (244, 245), (189, 244), (257, 258), (258, 386), (386, 257), (27, 159), (159, 28), (28, 27), (385, 386), (258, 385), (158, 28), (159, 158), (388, 467), (467, 260), (30, 247), (247, 161), (466, 467), (388, 466), (246, 161), (247, 246), (248, 456), (456, 419), (419, 248), (3, 196), (196, 236), (236, 3), (399, 419), (456, 399), (174, 236), (196, 174), (333, 298), (298, 332), (103, 68), (68, 104), (284, 332), (103, 54), (285, 8), (8, 417), (417, 285), (55, 193), (193, 8), (8, 55), (168, 417), (8, 168), (193, 168), (340, 261), (261, 346), (346, 340), (111, 117), (117, 31), (31, 111), (448, 346), (261, 448), (228, 31), (117, 228), (417, 441), (441, 285), (55, 221), (221, 193), (413, 441), (221, 189), (327, 460), (460, 326), (326, 327), (98, 97), (97, 240), (240, 98), (328, 326), (460, 328), (99, 240), (97, 99), (277, 355), (355, 329), (329, 277), (47, 100), (100, 126), (126, 47), (371, 329), (355, 371), (142, 126), (100, 142), (309, 392), (392, 438), (438, 309), (79, 218), (218, 166), (166, 79), (439, 438), (392, 439), (219, 166), (218, 219), (382, 256), (256, 381), (154, 26), (26, 155), (341, 256), (382, 341), (112, 155), (26, 112), (279, 420), (420, 360), (131, 198), (198, 49), (429, 420), (279, 429), (209, 49), (198, 209), (365, 364), (364, 379), (379, 365), (136, 150), (150, 135), (135, 136), (394, 379), (364, 394), (169, 135), (150, 169), (277, 437), (437, 355), (126, 217), (217, 47), (343, 437), (217, 114), (443, 444), (444, 282), (282, 443), (223, 52), (52, 224), (224, 223), (283, 282), (444, 283), (53, 224), (52, 53), (275, 363), (363, 281), (51, 134), (134, 45), (440, 363), (275, 440), (220, 45), (134, 220), (262, 395), (395, 431), (211, 170), (170, 32), (369, 395), (262, 369), (140, 32), (170, 140), (337, 299), (299, 338), (338, 337), (108, 109), (109, 69), (69, 108), (297, 338), (109, 67), (335, 273), (273, 321), (91, 43), (43, 106), (273, 375), (146, 43), (450, 349), (349, 348), (119, 120), (120, 230), (450, 451), (231, 230), (467, 359), (359, 342), (342, 467), (247, 113), (113, 130), (130, 247), (446, 342), (359, 446), (226, 130), (113, 226), (283, 334), (334, 282), (52, 105), (105, 53), (293, 334), (283, 293), (63, 53), (105, 63), (250, 458), (458, 462), (462, 250), (20, 242), (242, 238), (238, 20), (461, 462), (458, 461), (241, 238), (242, 241), (276, 353), (353, 300), (300, 276), (46, 70), (70, 124), (124, 46), (383, 300), (353, 383), (156, 124), (70, 156), (325, 292), (292, 324), (324, 325), (96, 95), (95, 62), (62, 96), (292, 308), (78, 62), (283, 276), (276, 293), (63, 46), (46, 53), (300, 293), (63, 70), (447, 264), (264, 345), (345, 447), (227, 116), (116, 34), (34, 227), (372, 345), (264, 372), (143, 34), (116, 143), (352, 345), (345, 346), (346, 352), (123, 117), (117, 116), (116, 123), (345, 340), (111, 116), (1, 19), (19, 274), (274, 1), (1, 44), (44, 19), (354, 274), (19, 354), (125, 19), (44, 125), (248, 281), (281, 456), (236, 51), (51, 3), (363, 456), (236, 134), (426, 427), (207, 206), (436, 427), (426, 436), (216, 206), (207, 216), (380, 381), (381, 252), (252, 380), (153, 22), (22, 154), (154, 153), (256, 252), (22, 26), (391, 393), (393, 269), (39, 167), (167, 165), (393, 267), (37, 167), (199, 428), (428, 200), (200, 199), (200, 208), (208, 199), (428, 421), (201, 208), (330, 329), (329, 266), (266, 330), (101, 36), (36, 100), (100, 101), (371, 266), (36, 142), (432, 273), (273, 422), (202, 43), (43, 212), (287, 273), (432, 287), (57, 212), (43, 57), (290, 250), (250, 328), (328, 290), (60, 99), (99, 20), (20, 60), (462, 328), (99, 242), (258, 286), (286, 385), (158, 56), (56, 28), (384, 385), (158, 157), (446, 353), (353, 342), (113, 124), (124, 226), (265, 353), (446, 265), (35, 226), (124, 35), (386, 259), (259, 257), (27, 29), (29, 159), (386, 387), (160, 159), (422, 431), (431, 430), (210, 211), (211, 202), (422, 424), (204, 202), (445, 342), (342, 276), (276, 445), (225, 46), (46, 113), (113, 225), (422, 335), (106, 202), (306, 292), (292, 307), (77, 62), (62, 76), (325, 307), (77, 96), (366, 447), (447, 352), (352, 366), (137, 123), (123, 227), (227, 137), (302, 268), (268, 303), (73, 38), (38, 72), (271, 303), (268, 271), (41, 38), (73, 41), (371, 358), (358, 266), (36, 129), (129, 142), (327, 294), (294, 460), (240, 64), (64, 98), (455, 460), (294, 455), (235, 64), (240, 235), (294, 331), (331, 278), (278, 294), (64, 48), (48, 102), (102, 64), (331, 279), (49, 102), (271, 304), (74, 41), (272, 304), (271, 272), (42, 41), (74, 42), (436, 434), (434, 427), (207, 214), (214, 216), (436, 432), (212, 216), (272, 408), (184, 42), (407, 408), (184, 183), (394, 430), (430, 395), (395, 394), (169, 170), (170, 210), (210, 169), (369, 378), (378, 395), (170, 149), (149, 140), (400, 378), (149, 176), (296, 334), (334, 299), (299, 296), (66, 69), (69, 105), (105, 66), (334, 333), (104, 105), (168, 351), (351, 417), (193, 122), (122, 168), (6, 351), (168, 6), (122, 6), (411, 352), (352, 280), (50, 123), (123, 187), (376, 352), (411, 376), (147, 187), (123, 147), (319, 320), (320, 325), (325, 319), (89, 96), (96, 90), (90, 89), (285, 295), (295, 336), (336, 285), (55, 107), (107, 65), (65, 55), (296, 336), (295, 296), (66, 65), (107, 66), (320, 403), (403, 404), (180, 179), (179, 90), (319, 403), (179, 89), (348, 329), (100, 119), (349, 329), (100, 120), (293, 333), (104, 63), (293, 298), (68, 63), (323, 454), (454, 366), (366, 323), (93, 137), (137, 234), (234, 93), (454, 447), (227, 234), (315, 15), (15, 16), (15, 85), (316, 15), (315, 316), (86, 85), (15, 86), (279, 358), (358, 429), (209, 129), (129, 49), (331, 358), (129, 102), (316, 14), (14, 15), (14, 86), (317, 14), (316, 317), (87, 86), (14, 87), (285, 9), (9, 8), (9, 55), (349, 277), (47, 120), (252, 253), (253, 380), (153, 23), (23, 22), (374, 380), (153, 145), (402, 403), (403, 318), (318, 402), (178, 88), (88, 179), (179, 178), (319, 318), (88, 89), (6, 419), (419, 351), (122, 196), (196, 6), (197, 419), (6, 197), (196, 197), (324, 318), (318, 325), (96, 88), (88, 95), (397, 367), (367, 365), (365, 397), (172, 136), (136, 138), (138, 172), (288, 435), (435, 397), (397, 288), (58, 172), (172, 215), (215, 58), (435, 367), (138, 215), (439, 344), (344, 438), (218, 115), (115, 219), (439, 278), (48, 219), (271, 311), (311, 272), (42, 81), (81, 41), (311, 310), (80, 81), (281, 195), (195, 5), (195, 51), (248, 195), (195, 3), (287, 375), (146, 57), (287, 291), (61, 57), (396, 428), (428, 175), (175, 208), (208, 171), (199, 175), (268, 312), (312, 271), (41, 82), (82, 38), (312, 311), (81, 82), (444, 445), (445, 283), (53, 225), (225, 224), (254, 339), (339, 373), (144, 110), (110, 24), (390, 373), (339, 390), (163, 110), (144, 163), (295, 282), (282, 296), (66, 52), (52, 65), (448, 347), (347, 346), (117, 118), (118, 228), (448, 449), (229, 228), (454, 356), (356, 447), (227, 127), (127, 234), (296, 337), (108, 66), (337, 10), (10, 151), (10, 108), (338, 10), (10, 109), (439, 294), (64, 219), (439, 455), (235, 219), (415, 292), (292, 407), (183, 62), (62, 191), (371, 429), (209, 142), (355, 429), (209, 126), (372, 340), (111, 143), (265, 340), (372, 265), (35, 143), (111, 35), (388, 390), (390, 466), (246, 163), (163, 161), (390, 249), (7, 163), (346, 280), (50, 117), (295, 442), (442, 282), (52, 222), (222, 65), (442, 443), (223, 222), (19, 94), (94, 354), (125, 94), (370, 354), (94, 370), (141, 94), (125, 141), (285, 442), (222, 55), (441, 442), (222, 221), (197, 248), (3, 197), (197, 195), (359, 263), (263, 255), (255, 359), (130, 25), (25, 33), (33, 130), (249, 255), (25, 7), (275, 274), (274, 440), (220, 44), (44, 45), (457, 440), (274, 457), (237, 44), (220, 237), (383, 301), (301, 300), (70, 71), (71, 156), (368, 301), (383, 368), (139, 156), (71, 139), (351, 465), (245, 122), (412, 465), (351, 412), (188, 122), (245, 188), (263, 467), (247, 33), (389, 251), (251, 368), (139, 21), (21, 162), (374, 386), (386, 380), (153, 159), (159, 145), (385, 380), (153, 158), (394, 378), (378, 379), (150, 149), (149, 169), (419, 412), (188, 196), (399, 412), (188, 174), (426, 322), (322, 436), (216, 92), (92, 206), (410, 436), (216, 186), (387, 373), (373, 388), (161, 144), (144, 160), (393, 326), (326, 164), (164, 393), (167, 164), (164, 97), (97, 167), (2, 164), (326, 2), (2, 97), (370, 461), (461, 354), (125, 241), (241, 141), (370, 462), (242, 141), (267, 164), (164, 0), (164, 37), (11, 12), (12, 302), (72, 12), (12, 268), (38, 12), (374, 387), (160, 145), (12, 13), (13, 268), (38, 13), (13, 312), (82, 13), (300, 298), (68, 70), (265, 261), (31, 35), (446, 261), (31, 226), (385, 381), (154, 158), (330, 425), (205, 101), (391, 426), (206, 165), (355, 420), (198, 126), (437, 420), (198, 217), (327, 393), (167, 98), (457, 438), (438, 440), (220, 218), (218, 237), (344, 440), (220, 115), (362, 341), (112, 133), (463, 341), (362, 463), (243, 133), (112, 243), (457, 461), (461, 459), (459, 457), (237, 239), (239, 241), (241, 237), (458, 459), (239, 238), (430, 364), (135, 210), (414, 463), (463, 398), (173, 243), (243, 190), (262, 428), (428, 369), (140, 208), (208, 32), (274, 461), (241, 44), (316, 403), (403, 317), (87, 179), (179, 86), (402, 317), (87, 178), (315, 404), (404, 316), (86, 180), (180, 85), (314, 405), (405, 315), (85, 181), (181, 84), (313, 406), (406, 314), (84, 182), (182, 83), (406, 421), (421, 418), (194, 201), (201, 182), (366, 401), (401, 323), (93, 177), (177, 137), (361, 323), (401, 361), (132, 177), (93, 132), (407, 306), (306, 408), (184, 76), (76, 183), (306, 409), (185, 76), (291, 409), (185, 61), (409, 287), (287, 410), (186, 57), (57, 185), (410, 432), (212, 186), (416, 427), (207, 192), (416, 411), (187, 192), (368, 372), (143, 139), (383, 372), (143, 156), (459, 438), (218, 239), (459, 309), (79, 239), (376, 366), (137, 147), (376, 401), (177, 147), (4, 1), (1, 275), (45, 1), (262, 421), (201, 32), (358, 294), (64, 129), (435, 416), (192, 215), (433, 416), (435, 433), (213, 215), (192, 213), (439, 289), (289, 455), (235, 59), (59, 219), (392, 289), (59, 166), (462, 326), (97, 242), (370, 326), (97, 141), (370, 2), (2, 141), (94, 2), (455, 305), (305, 460), (240, 75), (75, 235), (289, 305), (75, 59), (448, 339), (339, 449), (229, 110), (110, 228), (254, 449), (229, 24), (446, 255), (255, 261), (31, 25), (25, 226), (254, 450), (230, 24), (253, 450), (230, 23), (253, 451), (231, 23), (252, 451), (231, 22), (252, 452), (232, 22), (256, 452), (232, 26), (341, 452), (232, 112), (341, 453), (233, 112), (464, 414), (414, 413), (189, 190), (190, 244), (464, 463), (243, 244), (413, 286), (286, 441), (221, 56), (56, 189), (286, 442), (222, 56), (258, 442), (222, 28), (258, 443), (223, 28), (257, 443), (223, 27), (443, 259), (259, 444), (224, 29), (29, 223), (260, 444), (224, 30), (260, 445), (225, 30), (467, 445), (225, 247), (250, 309), (309, 458), (238, 79), (79, 20), (290, 305), (305, 392), (392, 290), (60, 166), (166, 75), (75, 60), (305, 328), (99, 75), (376, 433), (433, 401), (177, 213), (213, 147), (435, 401), (177, 215), (290, 309), (79, 60), (416, 376), (147, 192), (463, 453), (233, 243), (464, 453), (233, 244), (464, 357), (128, 244), (465, 357), (128, 245), (412, 343), (343, 465), (245, 114), (114, 188), (343, 399), (399, 437), (217, 174), (174, 114), (440, 360), (360, 363), (134, 131), (131, 220), (456, 420), (420, 399), (174, 198), (198, 236), (363, 420), (198, 134), (401, 288), (288, 361), (132, 58), (58, 177), (265, 383), (156, 35), (249, 339), (339, 255), (25, 110), (110, 7), (255, 448), (228, 25), (317, 13), (13, 14), (13, 87), (317, 312), (82, 87), (402, 312), (82, 178), (402, 311), (81, 178), (318, 311), (81, 88), (318, 310), (80, 88), (324, 310), (80, 95)]

    G = nx.Graph(EDGES)
 
    distances = []
    
    dist_mat =  scipy.spatial.distance.cdist(landmarks, landmarks,metric=distance_metric)
    for conn in EDGES:
        distances.append(dist_mat[conn[0],conn[1]])
    
    distances = np.array(distances)
    return distances

def merge_distances(X):
    """
    Convert the 1365 facial landmarks facial graph to a downsampled 202 distance one
    
    Parameters
    ----------
    X: numpy array
        Calculated distances
        
    Returns
    -------
    X_merged: numpy array
        Converted distances from downsampled graph
    """
    merged_pairs = [[1060, 977, 1061, 1040], [629, 1071, 28, 1066, 48, 424], [241, 470, 236, 475, 181, 881], [120, 517, 124, 957, 806, 515], [614, 612, 389, 384], [1348, 1242, 1010, 1004, 934, 1237], [590, 21, 585, 828], [1252, 279, 623], [1123, 459, 93, 1], [1189, 789, 1216, 295, 101, 785], [872, 1050, 1028, 780], [1297, 1299, 430, 1235], [49, 1072, 425, 33, 632, 1067], [548, 1126], [708, 1171, 1202, 823], [131, 448, 464, 125], [149, 109, 113, 145], [132], [24, 582, 947, 1194, 18, 588], [1240, 930, 1248, 273, 175], [733, 734, 840], [260, 564, 580, 1036, 254, 1024], [272, 386, 496, 909], [1260, 453, 1256, 457], [1093, 924, 923, 1092], [59, 481], [1213, 891, 887, 1302, 1306, 1339], [546, 561, 487, 695, 492, 542], [1253, 1249, 1257], [151, 115, 755, 745, 902], [30, 35, 1082, 712], [2, 1122, 458], [141, 230, 654, 690, 518, 186], [304, 1161, 192, 1164], [313, 1154, 320, 1150], [204, 522, 912, 198], [498, 461, 1016, 894, 127], [1279, 366, 213, 1282, 1285, 217], [988, 999, 797, 937], [1107, 463, 1337], [335, 251, 349, 329, 648], [20, 584, 827, 589], [347, 633, 246, 1064], [121, 510, 516, 116, 803, 956], [375, 1007, 535], [23, 950, 27, 587, 1195, 591], [200, 289, 285, 205], [336, 720, 250, 244], [1359, 903, 160, 1174, 962, 12, 1363, 568, 155, 14, 574, 700, 1178, 743], [365, 208, 1278, 1284, 1281, 214, 1286], [312, 283, 308, 317], [643, 104, 941, 171, 407], [774, 819, 78, 256], [1323, 390, 1326, 1327, 1319], [500, 1114, 128, 1019], [1026, 1022, 26, 262], [996, 553, 1129, 1127, 1143, 557, 556], [605, 1291, 1017, 444], [332, 620, 337], [137, 637, 227, 301, 307, 640], [512, 770, 73, 122], [879, 885, 234, 1214], [761, 764, 504, 477], [597, 790, 1305, 711, 1169, 1307, 892, 826, 1173, 1340, 888], [1358, 1351, 1354, 1089, 922], [846, 843, 833, 808, 830], [252, 619, 338, 334, 649], [1275, 1270, 221, 1264, 371, 225], [291, 100], [973, 598, 565, 673, 406, 677], [1137, 70, 1265, 361, 1313], [1308], [242, 182, 476, 471, 237, 882], [80, 76, 773, 396, 394, 547], [1120, 1314, 68, 8, 92, 456, 1316], [1153, 321, 314, 1157], [873, 357, 778, 1033, 870, 781], [374, 209, 684, 692, 484], [69, 1315, 1259, 66], [1029, 1051, 874, 782], [1025, 25, 261, 1021], [118, 954, 771, 513, 123, 74], [51, 112, 150, 742, 716], [729, 897, 725, 429, 1294, 1230], [1098, 676, 536, 972], [899, 153, 159, 13, 754], [165, 1186], [277, 856, 624, 454], [52, 34, 717, 1085], [575, 572, 703, 965, 17, 1179, 1177, 573, 15], [354, 869, 1030, 777], [191, 303, 1163, 1158], [1011, 935, 931, 278, 1349], [1048, 509, 767, 759, 688, 140], [1009, 3, 380, 1289, 534, 1245], [867, 705, 796, 571], [422, 428, 1231, 660], [848, 1149, 1147, 835], [107, 174, 410, 944, 1238, 1241, 178], [152, 111, 741, 148, 901, 156], [491, 545, 926, 560, 693], [468, 240, 474, 756], [628, 626, 859, 857], [437, 46, 816, 64, 42], [269, 381, 495, 908, 387], [914, 86, 918, 81], [599, 674, 974, 566, 678, 411], [551, 1115, 1293, 445, 604, 1199, 1075, 1131, 1078, 1018], [9, 681, 378], [646, 983], [715, 31, 719, 54], [933, 980, 11, 280], [845, 1148, 1144, 832], [1296, 442, 1217, 1234, 449], [84, 639, 344, 346, 88, 1141], [1204, 266, 271, 1012, 270, 1015], [189, 323, 326, 195], [268, 603, 602, 264], [1070, 634, 247, 1080, 352, 1069], [44, 854, 627, 621, 1250, 858], [800, 418, 805, 987], [196, 325, 328, 197], [1333, 1318, 1325, 1324, 1320], [1125, 1074, 1077, 550, 1196, 1290], [102, 943, 1346, 1247, 173, 596, 414, 946], [656, 749, 187, 166, 1187], [7, 1134, 420, 359, 218, 96, 6], [1345, 1006], [306, 228, 641, 138], [499, 1328], [1232, 427, 446, 661, 451, 1222, 1309, 431], [1188, 746, 298, 618, 1190], [607, 606, 992, 991], [1105, 351, 248], [569, 866, 570, 791, 704], [243, 473, 884, 239], [355, 397, 403], [812, 794, 878, 863], [709, 824, 1172, 1203, 890, 1215], [185, 142, 651, 179, 231, 655], [417, 1266, 224, 1263, 1269, 220, 1121], [1138, 87, 83, 345, 635, 339], [758, 135, 1047, 687, 766, 506], [1210, 730, 898, 1219, 450], [1228, 1227, 1229, 662, 659, 1224, 1223], [201, 206, 657, 290, 286], [232, 143, 652, 188], [1113, 1336], [315, 327, 194, 318], [554, 1142, 600, 993], [579, 493, 489, 928], [274, 1246, 524], [507, 341, 763, 503], [294, 299, 1191, 1103], [399, 799], [483, 60, 1109], [56, 38, 433, 62, 65, 852, 1106, 478], [1043, 978, 379, 1063, 1062], [168, 1185, 184, 1059, 1057, 170], [4, 981, 281, 936], [467, 1335, 134, 1330, 130], [90, 1044, 1274, 370], [917, 342, 508, 89], [79, 257, 775, 820], [982, 293], [1182, 163, 169], [804, 486, 541, 984], [1221, 960], [989, 1000, 802, 940], [1357, 919, 860, 1353], [904, 1360, 161, 1364], [465, 1209, 836], [679, 563, 697, 1099, 975, 539], [850, 400, 404, 421], [53, 1086, 36, 718], [1108, 432, 55, 37, 815, 61, 43], [839, 841, 736, 838, 440], [671, 97, 223, 669], [77, 71, 544, 768, 391, 395], [523, 288, 913, 207, 311, 203], [1130, 555], [526, 436, 529, 41, 647, 853, 45], [862, 875, 793, 811], [895, 497, 1331], [402, 405, 356], [297, 617, 331, 1054, 1058], [558, 576, 490], [706, 1170, 787, 1166, 592, 821], [593, 784, 788], [144, 233, 521, 691], [865, 809, 847, 834], [1003, 609, 388, 613, 383, 906], [966, 439], [372, 685, 212, 368, 682], [1045, 0, 95], [413, 644, 813, 172, 99, 942, 945], [162, 16, 158], [961, 735, 727, 731], [723, 133, 969], [532, 1034, 377, 531], [1027, 263, 259, 581, 1039, 567], [369, 670, 666, 363]]
      
    X_merged = []
    for i in range(len(X)):
        all_dist = []
        for edges in merged_pairs:
            all_dist.append(X[i, edges].sum())
        X_merged.append(all_dist)
    return np.array(X_merged)

def process_image_list(path_to_files):
    """
    Get the VGG-Face and MediaPipe feature vector for images. Hybrid model should be seperately added, since it works from a virtual machine
    
    Parameters
    ----------
    path_to_files: list/numpy array
        File paths to images
        
    Returns
    -------
    X_VGG_Face: numpy array
        Extracted feature vectors
    X_mediapipe: numpy array
        Extracted feature vectors
    """
    X_VGG_Face, X_mediapipe = [], []
        
    for file in path_to_files:
        X_VGG_Face.append(DeepFace.represent(file, model_name='VGG-Face',detector_backend='mtcnn'))
        raw_landmarks, landmarks, crop_img = get_crop_image(file)
        X_mediapipe.append(calc_selected_distances(raw_landmarks, 'euclidean'))
    
    X_mediapipe = merge_distances(np.array(X_mediapipe))
    
    return np.array(X_VGG_Face), X_mediapipe
        
            